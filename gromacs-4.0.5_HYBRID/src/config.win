
/* Only use this file if you are compiling Gromacs in a
 * native Microsoft Windows Enviroment. You should NOT
 * use it for cygwin.
 * 
 * And, DO read this text before building things :-)
 *
 * First, if you are using visual C++ you could try to
 * download the build workspace files from ftp.gromacs.org.
 * You can find them in the pub/developer directory.
 * 
 * Even if you are using the build workspace - first 
 * copy config.win to config.h in the src directory, and 
 * make sure the Gromacs version defined in that file is 
 * the same as in configure.ac. 
 *
 * (Dont rename it since config.h can be overwritten
 * by the configure script if you later use e.g. cygwin).
 *
 * You will also need the FFTW libraries for windows. Grab
 * the precompiled version from ftp.gromacs.org/pub/developer,
 * or use the build environment from the same place and compile
 * it yourself. Place the libraries and include files somewhere
 * where they are included automatically, e.g.
 * \program files\Microsoft Visual Studio\VC98\Include,Lib
 *
 * I don't plan on updating the build environment, so you might
 * find that filenames, etc, have changed. In that case, here's
 * a short description of how to do it:
 * 
 * Always define -DHAVE_CONFIG_H when you build, and include
 * the current, src (..) and the include directories. Use optimization
 * flags :-)
 * 
 * 1. Build the innerloop generating program in the gmxlib
 *    directory. Use all the mkinl*.c sources and metacode.c
 *    Call the output program 'mkinl'.
 *
 * 2. Run it as 'mkinl c' to create the inner loops in
 *    the file innerc.c.
 * 
 * 3. Compile gmxlib into a library. Look at the filelists 
 *    in Makefile.am to see which files should be in it.
 *    In general, include everything except xml stuff 
 *    (*xml*, it will have to wait for gmx4), powerpc specific
 *    stuff (*altivec*), motif stuff (*mgmx*, widget*), 
 *    fortran files (f77*), and of course the innerloop files 
 *    (mkinl*, metacode*). Don't use the fortran sources.
 *
 *    Include the assembly file x86_cpuid.s. If you use
 *    single precision you should also use x86_sse.s and
 *    x86_3dnow.s, and for double prec. x86_sse2.s instead.
 *    To build these files you need the free 'nasm' assembler.
 *    You can find a version that supports extended 3dnow and sse
 *    at the gromacs ftp site. Use it like:
 *
 *    nasm -f win32 x86_cpuid.s
 *
 * 4. Build the mdlib library from all the files in
 *    src/mdlib. Skip the fortran files (*.f).
 *
 * 5. Compile and link all the programs in kernel and
 *    tools. They should all be linked with the two
 *    libraries above. Look at the Makefile.am in each
 *    directory for descriptions of which files are
 *    included in each binary. For instance, mdrun consists of the files:
 *
 *    glaasje.c gctio.c init_sh.c ionize.c do_gct.c relax_sh.c 
 *    xutils.c md.c mdrun.c genalg.c
 */

/* You might have to update the version number in this file.
 * To compile in double precision:
 * 1) Define GMX_DOUBLE below
 * 2) Check that we use the right FFTW name prefix for double below */

#define PACKAGE "gromacs"

#define VERSION "3.1.99"
/* #undef GMX_DOUBLE */

/* This is just the *default* library directory. Before looking here
 * the program will try to find it relative to the location of the
 * binary you are running. This is only used by grompp and other programs
 * that create/edit topologies.
 */
#define GMXLIBDIR "C:\\program files\\gromacs\\share\\top"

/* Windows doesnt have SIGUSR, so we use SIGBREAK instead */
#define SIGUSR1 SIGBREAK

#define RETSIGTYPE void

#ifdef GMX_DOUBLE
#  define FFTW_NAME_FFTW
#else
#  define FFTW_NAME_SFFTW
#endif
/* You could also use FFTW_NAME_DFFTW for double prec,
 * or FFTW_NAME_FFTW for single. You should get compiler warnings
 * if your headers don't match, but we do not check the libraries.
 */

#define HAVE_LIMITS_H

#define HAVE_MEMORY_H

#define HAVE_STDLIB_H

#define HAVE_STRDUP

#define HAVE_STRING_H

#define HAVE_SYS_STAT_H

#define HAVE_SYS_TYPES_H

#define HAVE_VPRINTF

#define SOFTWARE_SQRT

#define STDC_HEADERS

/* Remove these defines to disable assembly loops */
#ifdef GMX_DOUBLE
#  define USE_X86_SSE2
#else
#  define USE_X86_SSE_AND_3DNOW
#endif

#define X_DISPLAY_MISSING

#define NO_PWUID

/* Pipe system calls */
#define popen _popen
#define pclose _pclose

/* not defined in sys/types on windows */
#define gid_t int

/* not defined in sys/types on windows */
#define uid_t int

/* No error function on windows, use our own */
#define erf(x) gmx_erf(x)
#define erfc(x) gmx_erfc(x)

#define inline __inline
